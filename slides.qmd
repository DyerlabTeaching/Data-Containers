---
title: "Data Containers"
subtitle: "A place for everything"
author: Rodney J. Dyer
format: 
  revealjs:
    background-transition: fade
    theme: default
editor: source
execute: 
  echo: true
title-slide-attributes: 
  data-background-image: "media/contour.png"
  data-background-position: "right"
  data-background-size: initial
---


# Vectors {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}


## A Vector

A vector is a storage container for data of a uniform data class type.

```{r}
x <- c( 1, 2, 3, 4 )
```

::: {.fragment}

All programmers are lazy and know that the fewer key presses you have to make, the less likely an error will be introduced.  So the function named `combine` is represented as `c()`. 


```{r}
x
```

Its job is to smush a bunch of data into a simple container.
:::


## Accessing Elements

A vector contains similar data types and each element can be accessed using numerical indices nested with square brackets `[` & `]`.[^1]

```{r}
x[2]
```

[^1]: It should be noted that indices in all R data containers start at 1 for the first element (not 0 like many other languages derived from C).


## Introspection

Because `x` is a vector AND it contains `numeric` data, the introspection operators for both vector and numeric will return `TRUE`.

&nbsp;

::: {layout-ncol="2"}
```{r}
is.vector( x )
```


```{r}
is.numeric( x )
```
:::

&nbsp;

The data in `x` ARE both vectors and numeric types.


## Other Data Types

As long as the base data type is the exact same, vectors will always work properly.

```{r}
c("A", "B", "C", "The Cat jumped over the moon")
c( TRUE, FALSE, FALSE, TRUE)
```

## {{< fa blender >}} No Mixing Allowed 

You **CANNOT** mix data types in a single vector and keep the same kinds of data. `R` will coerce to a *least common data type* so that they are all of the same type.

```{r}
c( 1, TRUE, FALSE, 23)
```

&nbsp;

```{r}
c( 1, TRUE, "FALSE", 23)
```

## Sequences

Sometimes it is helpful to make a a sequence of values in a vector.  `R` has some built-in functionality here for that.

&nbsp;

::: {layout-ncol="2"}
### Sequence Operator
```{r}
w <- 1:6
w
```


### The `seq()` function
```{r}
x <- seq(10,30, by=3)
x
```
:::


::: {.fragment}
&nbsp;

::: {layout-ncol="2"}
### LETTERS
```{r}
y <- LETTERS[1:5]
y
```


### The `seq()` function (again)
```{r}
z <- seq(10,30, length.out = 6)
z
```
:::

:::


## Vector Operators

Data within vectors can be subjected to unary opertors.

&nbsp;

```{r}
-z
```

&nbsp;

```{r}
!z
```

## Vector Operators

As well as binary operators.

&nbsp;

```{r}
w + z 
```


```{r}
z^w
```


## Recycling Rule

If you attempt to perform a binary operator on two vectors whose lengths are different, it will *recycle* the values in the shorter one.

```{r}
c(1,2,3) + c(10,20,30,40,50,60)
```

::: {.fragment}
&nbsp;

But if the lengths are not clean multiples, `R` will give you a warning (but still give you an answer).

```{r}
c(1,2,3,4) + c(10,20,30,40,50,60)
```

:::





# Matrices {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}


## {{< fa blender >}} 2-Dimensional Vectors

For some mathematical operations, we need to work with matrices.  These are another 'general' container but with dimensions for *rows* and *columns* of data.

::: {layout-ncol="2"}
```{r}
matrix( 1:9, ncol=3 )
```


```{r}
matrix( LETTERS[1:9], nrow=3)
```
:::

## {{< fa blender >}} 2-Dimensional Vectors

Creating matrices are done columnwise, if you want them to be rowwise, you have to ask for it.

::: {layout-ncol="2"}
```{r}
matrix( 1:9, ncol=3 )
```


```{r}
matrix( 1:9, ncol=3, byrow = TRUE )
```
:::

## Indices

Just like vectors, the square brackets are used to access values within a matrix.  However, there are now two indices, one for the row and one for the column.

&nbsp;

::: {layout-ncol="2"}
```{r}
X <- matrix( 1:9, ncol=3, byrow = TRUE )
X
```


::: {.fragment}
```{r}
X[1,3] <- 42
X
```
:::
:::


## Slicing

You can get an entire row or column using what is called a slice index.


```{r}
X
```

&nbsp;

:::{.fragment}
:::{layout-ncol="2"}
```{r}
X[,2]
```


```{r}
X[1,]
```

:::
:::

## Matrix Operators

Arithamatic operators on matrices work the same way (as long as they are matrices of the proper number of rows and columns).

&nbsp;

:::{.layout-ncol="2"}
```{r}
X <- matrix( 1:4, ncol=2)
X
```


```{r}
Y <- matrix( c(3,5,7,9), ncol=2 )
Y
```
:::

## Binary Operators


```{r}
X + Y
```

```{r}
X * Y
```

This is element-wise multiplication (aka a Kronecker Product).


## Matrix Multiplication

Matrix multiplication is a bit more complicated as it is a slightly more involved {{< fa regular hand-point-right >}} {{< fa regular hand-point-down >}}.

&nbsp;


```{r}
X %*% Y 
```



# Lists {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}


## {{< fa bars >}} Lists 

Lists are more versatile containers in that they *allow you to store different kinds of data* in them.

By default, they are numerically indexed .

```{r}
lst <- list( "Bob", 32, TRUE )
lst
```

## Double Square Brackets

Notice that lists use two sets of square brackets instead of oneâ€”to differentiate itself from a normal vector

```{r}
lst[[1]] 
lst
```

## Why The Double Brackets?


This is because *technically*, the first element in the list is an also a list and what we are trying to get from that is the first element inside that contained list.  

```{r}
c( class(lst), class(lst[1]), class(lst[[1]]) )
```




## Named Lists

Lists can be made *more friendly* to you by using actual names for the *keys* associated with each *value*.  In some languages, like python, these are referred to as *dictionaries*.

```{r}
info <- list("Name" = "Bob", "Age" = 42)
info
```

:::{.fragment}
Notice the use of the \$ in the output
:::

## Named Lists

This \$ notation is used to easily grab the contents of the list at that *slot*.

&nbsp;

```{r}
info$Name <- "Robert"
info
```

## Named Lists

As well as to add new entries to the list directly.

&nbsp;

```{r}
info$PassedDyersClass <- TRUE
info
```


## Square Brackets Also Work

You can also use the double brackets AND the name of the key as a reference.  

```{r}
info[["Name"]]
```

:::{.fragment}
However this is even more work and looks a bit *less elegant* than the \$ notation.  Also, if you look at the order of operations, you'll see that the  \$ notation has a higher precedence in operations than the single or double brackets (see `?Syntax`).
:::



## Lists are Ubiquitous

In `R`, you will most likely work with list objects as analysis results rather than as a container to keep your data.  Almost all analyses return their values as a list with the included components.  Here is an example.

```{r}
summary( iris )
```



## Correlation

Here is a quick correlation between the sepal and pedal lengths in some `iris` data set.

```{r}
iris.test <- cor.test( iris$Sepal.Length, iris$Petal.Length )
iris.test
```


## Packaging of Results

```{r}
is.list( iris.test )
class( iris.test )
```

## What is hidden inside?

```{r}
#| echo: false
df <- as.data.frame( unlist( iris.test ) ) 
names(df) <- "Values"
df
```



## Custom Printing

Printing results show the components of the analysis in a way that makes sense because while it is a list

```{r}
iris.test
class( iris.test )
```


## Benefits

This is awesome because it makes it *much* easier to use something like the values stored in `iris.test` to insert the data from our analyses directly (inline) into our text.  


> There was a significant relationship between sepal and petal length (`r iris.test$method`, $\rho =$ `r format(iris.test["estimate"], digits=3)`, $t =$ `r format(iris.test["statistic"], digits=3)`, P = `r format(iris.test["p.value"],digits=3)`).


# Data Frames {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}



## The *Lingua Franca* of Data Analysis

The main container that almost all of your data will be contained in is the `data.frame`.

:::{.incremental}
- Similar to a spreadsheet
- Each column as the same data type (e.g., `weight`, `longitude`, `survived`) 
- Each row has all the observations for a given entity.
:::


## Example

Lets consider the following data as indiviudal vectors.

```{r}
names <- c("Bob","Alice","Jane")
homework.1 <- c(0.78, 0.95, 0.82)
homework.2 <- c(NA, 0.89, 0.92)
```

## Example

These can be put into a `data.frame` as:

```{r}
gradebook <- data.frame( names, homework.1, homework.2 )
gradebook
```

## Example

Each column in a `data.frame` is a self-contained set of data **all of the same type** and as such can be summarized.

```{r}
summary( gradebook )
```


## Named Columns

Just like in a list, the columns of a `data.frame` are accessed by their names, and we can use the \$ notation.

```{r}
names(gradebook)
gradebook$homework.1
is.na( gradebook$homework.2 )
```

## Indexing of Elements

The easiest way to index values in a `data.frame` is to use the \$ notation to grab the column (as a `vector` object) and then to use the square brackets to access a specific element.

```{r}
gradebook$homework.2[1]
gradebook$homework.2[1] <- 0.85
gradebook
```


## Indexing of Elements

You can also use the numerical indices for both *row* and *column* in the `data.frame` (n.b., it is row first then column).

```{r}
gradebook
```

&nbsp;

```{r}
gradebook[2,1]
```


## Dimensions 

The size of the elements contained in a `data.frame` are then relevant.


```{r}
dim( gradebook )
nrow( gradebook )
ncol( gradebook )
```

## External Data

You will almost never create `data.frame` objects *de novo* but instead load data in from some external resource.  There are several functions that simplify this within `tidyverse` so let's make sure we have it loaded into memory.

&nbsp;

```{r}
#| message: false
library( tidyverse )
```

## Example Data

Here is a CSV file that is contained in this repository.  Since it is a public repository, we can access it from within GitHub using a URL.

```{r}
url <- "https://raw.githubusercontent.com/DyerlabTeaching/Data-Containers/main/data/arapat.csv"
beetles <- read_csv( url )
```



## Example Data


::: {layout-ncol="2"}
### *Araptus attenuatus*

![](media/beetles.png)


### Data 

```{r}
dim( beetles )
head( beetles )
```
:::


## Example Data {.smaller}

```{r}
beetles %>%
  leaflet::leaflet() %>%
  leaflet::addProviderTiles(provider = leaflet::providers$Esri.WorldTopo) %>%
  leaflet::addMarkers( ~Longitude, ~Latitude,popup = ~Stratum )
```


## Questions

::: {layout-ncol="2"}
If you have any questions, please feel free to either post them as an "Issue" on your copy of this GitHub Repository, post to the [Canvas](https://canvas.vcu.edu) discussion board for the class, or drop me an [email](mailto://rjdyer@vcu.edu).

![](media/peter_sellers.gif){.middle fig-alt="Peter Sellers looking bored" fig-align="center" width="500"}
:::
